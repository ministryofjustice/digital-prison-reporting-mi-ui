version: 2.1

orbs:
  hmpps: ministryofjustice/hmpps@7.2.1
  slack: circleci/slack@4.12.1

parameters:
  alerts-slack-channel:
    type: string
    # Normally team specific alert channel e.g. hmpps_tech_alerts, syscon-alerts, dps_sed_alerts
    # This is to avoid a general alert dumping ground that no-one then monitors
    default: hmpps_typescript_notifications

  releases-slack-channel:
    type: string
    # Normally dps-releases for most teams / projects
    default: hmpps_typescript_notifications

  node-version:
    type: string
    default: 18.15-browsers

jobs:
  build:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - run:
          name: Update npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm ci --no-audit
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
            - ~/.cache
      - run:
          command: |
            npm run build
            DATE=$(date '+%Y-%m-%d')
            export BUILD_NUMBER=${DATE}.${CIRCLE_BUILD_NUM}
            export GIT_REF="$CIRCLE_SHA1"
            npm run record-build-info
      - run: # Run linter after build because the integration test code depend on compiled typescript...
          name: Linter check
          command: npm run lint
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - build-info.json
            - build
            - dist
            - .cache/Cypress

  build_docker:
    docker:
      - image: ministryofjustice/cloud-platform-tools
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build application Docker image
          command: |
            docker build -t app .
      - deploy:
          name: Push application Docker image
#          filters:
#            branches:
#              only:
#                - main
          command: |
            aws ecr get-login --no-include-email
            docker tag app "${ECR_ENDPOINT}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}:${CIRCLE_SHA1}"
            docker tag app "${ECR_ENDPOINT}:latest"
            docker push "${ECR_ENDPOINT}:latest"
            

  deploy:
    parameters:
      env:
        type: string
        default: dev
    steps:
      - checkout
      - run:
          name: Authenticate with cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME}
            kubectl config set-credentials circleci --token=${K8S_TOKEN}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}<< parameters.env >>
            kubectl config use-context ${K8S_CLUSTER_NAME}//TODO: ENV param goes here
            kubectl --namespace=${K8S_NAMESPACE}<< parameters.env >> get pods

      - run:
          name: Install demo helm chart
          command: |
            helm upgrade demo helm_deploy --install --namespace=${K8S_NAMESPACE}<< parameters.env >>
            kubectl --namespace=${K8S_NAMESPACE}<< parameters.env >> get pods

  unit_test:
    executor:
      name: hmpps/node
      tag: << pipeline.parameters.node-version >>
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: unit tests
          command: npm run test:ci
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: test_results/unit-test-reports.html

  integration_test:
    executor:
      name: hmpps/node_redis
      node_tag: << pipeline.parameters.node-version >>
      redis_tag: "7.0"
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - run:
          name: Install missing OS dependency
          command: sudo apt-get install libxss1
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Get wiremock
          command: curl -o wiremock.jar https://repo1.maven.org/maven2/com/github/tomakehurst/wiremock-standalone/2.27.1/wiremock-standalone-2.27.1.jar
      - run:
          name: Run wiremock
          command: java -jar wiremock.jar --port 9091
          background: true
      - run:
          name: Run the node app.
          command: npm run start-feature
          background: true
      - run:
          name: Wait for node app to start
          command: sleep 5
      - run:
          name: integration tests
          command: npm run int-test
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: integration-tests/videos
      - store_artifacts:
          path: integration-tests/screenshots

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build:
          filters:
            tags:
              ignore: /.*/
      - unit_test:
          requires:
            - build
      - integration_test:
          requires:
            - build
      - hmpps/helm_lint:
          name: helm_lint
      - build_docker:
          requires:
            - build
      - deploy_env:
          env: "dev"
#          filters:
#            branches:
#              only:
#                - main
          requires:
            - helm_lint
            - unit_test
            - integration_test
            - build_docker
          helm_timeout: 5m
#      - request-preprod-approval:
#          type: approval
#          requires:
#            - deploy_dev
#      - hmpps/deploy_env:
#          name: deploy_preprod
#          env: "preprod"
#          jira_update: true
#          jira_env_type: staging
#          context:
#            - hmpps-common-vars
#            - digital-prison-reporting-mi-ui-preprod
#          requires:
#            - request-preprod-approval
#          helm_timeout: 5m
#      - request-prod-approval:
#          type: approval
#          requires:
#            - deploy_preprod
#      - hmpps/deploy_env:
#          name: deploy_prod
#          env: "prod"
#          jira_update: true
#          jira_env_type: production
#          slack_notification: true
#          slack_channel_name: << pipeline.parameters.releases-slack-channel >>
#          context:
#            - hmpps-common-vars
#            - digital-prison-reporting-mi-ui-prod
#          requires:
#            - request-prod-approval
#          helm_timeout: 5m

  security:
    triggers:
      - schedule:
          cron: "8 4 * * 1-5"
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/npm_outdated:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
      - hmpps/npm_security_audit:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
      - hmpps/trivy_latest_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
      - hmpps/veracode_pipeline_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars
  security-weekly:
    triggers:
      - schedule:
          cron: "14 4 * * 1"
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/veracode_policy_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars
