/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/external-movements': {
    /** @description Gets a list of external movements */
    get: operations['externalMovements']
  }
  '/external-movements/count': {
    /** @description Gets a count of external movements */
    get: operations['count']
  }
  '/definitions': {
    /** @description Gets all report definitions */
    get: operations['definitions']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    ExternalMovementModel: {
      prisonNumber: string
      firstName: string
      lastName: string
      /** Format: date */
      date: string
      time: components['schemas']['LocalTime']
      from?: string
      to?: string
      direction?: string
      type: string
      reason: string
    }
    LocalTime: {
      /** Format: int32 */
      hour?: number
      /** Format: int32 */
      minute?: number
      /** Format: int32 */
      second?: number
      /** Format: int32 */
      nano?: number
    }
    Count: {
      /**
       * Format: int64
       * @description The total number of records
       * @example 501
       */
      count: number
    }
    FieldDefinition: {
      name: string
      displayName: string
      dateFormat?: string
      /** @enum {string} */
      wordWrap?: 'None'
      filter?: components['schemas']['FilterDefinition']
      sortable: boolean
      defaultSortColumn: boolean
      type: string
    }
    FilterDefinition: {
      /** @enum {string} */
      type: 'Radio' | 'Select' | 'DateRange'
      staticOptions?: components['schemas']['FilterOption'][]
    }
    FilterOption: {
      name: string
      displayName: string
    }
    ReportDefinition: {
      id: string
      name: string
      description?: string
      variants: components['schemas']['VariantDefinition'][]
    }
    VariantDefinition: {
      id: string
      name: string
      resourceName: string
      description?: string
      specification?: string
      fields: components['schemas']['FieldDefinition'][]
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /** @description Gets a list of external movements */
  externalMovements: {
    parameters: {
      query?: {
        selectedPage?: number
        pageSize?: number
        sortColumn?: string
        sortedAsc?: boolean
        /**
         * @description The direction to filter. It can be either In or Out
         * @example in
         */
        direction?: string
        /**
         * @description The start date (inclusive) from which to filter, in the format of yyyy-mm-dd.
         * @example 2023-04-25
         */
        startDate?: string
        /**
         * @description The end date (inclusive) up to which to filter, in the format of yyyy-mm-dd.
         * @example 2023-04-25
         */
        endDate?: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['ExternalMovementModel'][]
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** @description Gets a count of external movements */
  count: {
    parameters: {
      query?: {
        direction?: string
        /**
         * @description The start date (inclusive) from which to filter, in the format of yyyy-mm-dd.
         * @example 2023-04-25
         */
        startDate?: string
        /**
         * @description The end date (inclusive) up to which to filter, in the format of yyyy-mm-dd.
         * @example 2023-04-25
         */
        endDate?: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['Count']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** @description Gets all report definitions */
  definitions: {
    parameters: {
      query?: {
        /**
         * @description Set this parameter to filter the list to only include reports for the given rendering method.
         * @example HTML
         */
        renderMethod?: 'HTML' | 'PDF' | 'SVG'
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['ReportDefinition'][]
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Internal Server Error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
